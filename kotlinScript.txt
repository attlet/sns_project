1. 코틀린에서는 생성자 주입 시

- 자바의 경우 한 클래스에 여러 생성자가 존재할 수 있음 -> 그래서 Autowired같은 어노테이션으로 어떤 생성자로 주입하는지 지정
- 하지만 코틀린의 경우 단일 주 생성자를 클래스 선언부에 작성하는 경우가 많음 -> 스프링이 감지해서 주입, 어노테이션 필요 없음
- 만약 주 생성자 말고도 추가로 생성자를 작성했다면, 어노테이션 필요해질 것


2. entity <-> dto 변환 방법

- Mapper 방식을 선택 (MapStruct)
- 인터페이스에 mapper 어노테이션 지정. 이를 통해 컴파일 타임에 인터페이스를 읽어 구현체를 자체적으로 생성
- 작성한 메서드를 확인해서, 매핑 정보를 확인. 파라미터가 member, 반환타입이 responseDto면, 둘의 필드이름이
  같은 것들을 매핑해서 reponse생성
- 원하지 않는다면, 커스터마이징 가능. 복잡한 매핑 로직 추가 가능.

- 장점은 성능이 다른 mapper 방식보다 뛰어나다는 점. 단점은 커스터마이징이 어렵다는 점


3. kotlin 주석 생성기

- plugin Kdoc 검색해서 설치
- /** + enter로 클래스/메서드의 설명 생성

4. 현재 시간 가져오는 Instant

- Instant의 경우 LocalDateTime과 달리 전 세계 동기화된 시간을 가져옴
- 전 세계적으로 동일한 시점을 가져오는 것.


5. 코틀린에서 Integer.toString -> 그냥 int 타입이 갖는 함수 toString으로 동일한 기능 수행 가능

6. 코틀린의 엘비스 연산자 ?는 왼쪽값이 null이면 오른쪽 문법을 실행하는 연산자.
 ex ) val emitter = map[userId] ?: return  이 구문에서 userId를 key로 갖는 value가 없다면 null을 반환. 그러면 return 실행

 변수 선언 시 ? 이용해 null허용함을 선언하는 것과는 다름. val name : String? = null 은 name 변수에 null을 허용하고, null값을 할당한 것.


7. lateinit을 통해 변수 선언시 초기값을 할당하지 않아도 됨을 알림. var로 선언해야함.

8. 테이블 컬럼 이름을 read로 지으니 문제 발생했음. -> 다른 이름으로 변경. mariaDB의 경우 read는 예약어이다.

9. response.contentType -> response?.contentType 으로 변경해야했음. HttpServletResponse가 null로 들어올 수 있도록 되어있었음.

10. kotlin에서는 stream().map()을 통해 리스트마다 어떤 동작을 적용하고자 할 때, 결과에 collect(Collection.toList) 를 사용할 필요가 없음
 toList만으로 java의 collection.toList와 동일한 동작을 수행

 --> 굳이 stream도 사용할 필요 없이 kotlin.collection에서 지원하는 map을 사용하면 된다.


11. 코틀린의 safe call 방법인 ?. 을 사용할 수 있음.

ex ) 다음 두 연산은 동일한 연산을 수행

     s?.toUpperCase()
     if (s != null) s.toUpperCase() else null

?를 통해 s가 null이면 toUpperCase를 호출하지 않고, null이 아닐때만 호출하도록 함. null safe 보장


12. kotlin.collection에서 emptyList()를 지원. 빈 리스트를 나타낸다. 이를 통해 null같은 상황 발생 시 빈 리스트 반환 가능

13. as 는 kotlin 에서 타입 캐스팅을 수행하는 키워드이다. 만약 캐스팅이 불가능할 경우 (String -> Int 같이) ClassCastException이 발생한다.

만약 exception을 발생시키기 싫다면, as?를 통해 실패 시 null을 넣도록 할 수 있다.

14. kotlin은 자바와 달리 throws를 통해 해당 메서드가 어떤 예외를 반환한는지 명시할 필요가 없다.

15. companion object를 이용해 java의 static처럼 컴파일 시점에 초기화를 할 수 있다. 객체 생성 하지 않고 메서드, 필드를 사용할 수 있다.

16. 상속한 클래스에 매개변수를 작성하면, 자바에서 super를 사용하는 것과 동일하게 부모 클래스의 생성자를 호출하는 효과.

ex ) class customException() : RuntimeExcetpion(message)   --> RuntimeException 생성자를 message를 담아서 호출